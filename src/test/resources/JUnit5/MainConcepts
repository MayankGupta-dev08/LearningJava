JUnit Framework
- Step 01 : Need for Unit Testing
- Step 02 : Setting up your First JUnit
- Step 03 : First Successful JUnit. Green Bar and assertEquals
- Step 04 : Refactoring Your First JUnit Test
- Step 05 : Second JUnit Example assertTrue and assertFalse
- Step 06 : @Before @After
- Step 07 : @BeforeClass @AfterClass
- Step 08 : Comparing Arrays in JUnit Tests
- Step 09 : Testing Exceptions in JUnit Tests
- Step 10 : Testing Performance in JUnit Tests
- Step 11 : Parameterized Tests
- Step 12 : Organize JUnits into Suites

---

Mockito Framework
- Step 01 : Set up an Eclipse Project with JUnit and Mockito frameworks. First Green Bar.
- Step 02 : Example to start understanding why we need mocks.
- Step 03 : What is a stub? Create an unit test using Stub? Disadvantages of Stubs.
- Step 04 : Your first Mockito code! Hurrah!!! Lets use Mockito to mock TodoService.
- Step 05 : Stubbing variations with Mockito. A few mockito examples mocking List class : Multiple return values, Argument Matchers and throwing exceptions.
- Some Theory : Mockito vs EasyMock https://github.com/mockito/mockito/wiki/Mockito-vs-EasyMock
- Step 06 : Introduction to BDD. Given When Then. BDD Mockito Syntax.
- Step 07 : How to verify calls on a mock? Verify how many times a method is called. We will add deleteTodo method to the TodoService.
- Step 08 : How to capture an argument which is passed to a mock?
- Step 09 : Hamcrest Matchers.
- Step 10 : Let's simplify things with Mockito Annotations. @Mock, @InjectMocks, @RunWith(MockitoJUnitRunner.class), @Captor
- Step 11 : JUnit Rules. Using MockitoJUnit.rule() instead of @RunWith(MockitoJUnitRunner.class).
- Step 12 : Real world Example with Spring
- Step 13 : What is a spy? How to spy with Mockito?
- Step 14 : Some Theory : Why does Mockito not allow stubbing final and private methods?
- Step 15 : Using PowerMock and Mockito to mock a Static Method.
- Step 16 : Using PowerMock and Mockito to invoke a private Method.
- Step 17 : Using PowerMock and Mockito to mock a constructor.
- Step 18 : Good Unit Tests.